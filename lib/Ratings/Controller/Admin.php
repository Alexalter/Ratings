<?php

/**
 * Zikula Application Framework
 *
 * @copyright (c) 2002, Zikula Development Team
 * @link http://www.zikula.org
 * @version $Id$
 * @license GNU/GPL - http://www.gnu.org/copyleft/gpl.html
 */
class Ratings_Controller_Admin extends Zikula_AbstractController {

    /**
     * Main ratings administration function
     * @return the result of view() function
     */
    public function main() {
        // Security check will be done in view()
        return ModUtil::func('Ratings', 'admin', 'view');
    }

    /**
     * view items
     *
     * @param int $startnum the start item id for the pager
     * @return string HTML output
     */
    public function view() {

        // Security check
        if (!SecurityUtil::checkPermission('Ratings::', '::', ACCESS_EDIT)) {
            return LogUtil::registerPermissionError();
        }

        // Get parameters from whatever input we need.
        $startnum = (int) FormUtil::getPassedValue('startnum', isset($args['startnum']) ? $args['startnum'] : null, 'GET');

        // Create output object
        $view = Zikula_View::getInstance('Ratings', false);

        // we need this value multiple times, so we keep it
        $itemsperpage = ModUtil::getVar('Ratings', 'itemsperpage');

        // Get all matching ratings
        $items = ModUtil::apiFunc('Ratings', 'user', 'getall', array('startnum' => $startnum,
                    'numitems' => $itemsperpage));

        if (!$items) {
            $items = array();
        }

        $rows = array();
        foreach ($items as $key => $item) {
            $options = array();
            if (SecurityUtil::checkPermission('Ratings::', "$item[module]::$item[rid]", ACCESS_EDIT)) {
                $modulemeta = ModUtil::apiFunc($item['module'], 'user', 'getmodulemeta');
                if (isset($modulemeta['displayfunc'])) {
                    $options[] = array('url' => ModUtil::url($item['module'], 'user', $modulemeta['displayfunc'], array($modulemeta['itemid'] => $item['itemid'])),
                        'image' => 'demo.png',
                        'title' => $this->__('View'));
                }
                if (SecurityUtil::checkPermission('Ratings::', "$item[module]::$item[rid]", ACCESS_DELETE)) {
                    $options[] = array('url' => ModUtil::url('Ratings', 'admin', 'delete', array('rid' => $item['rid'])),
                        'image' => '14_layer_deletelayer.png',
                        'title' => $this->__('Delete'));
                }
            }

            // Add the calculated menu options to the item array
            $item['options'] = $options;
            $rows[] = $item;
        }

        // Assign the items to the template
        $view->assign('ratings', $rows);

        // Assign the information required to create the pager
        $view->assign('pager', array('numitems' => ModUtil::apiFunc('Ratings', 'user', 'countitems'),
            'itemsperpage' => $itemsperpage));

        // Return the output that has been generated by this function
        return $view->fetch('ratings_admin_view.tpl');
    }

    /**
     * delete item
     *
     * @param 'rid' the id of the rating
     * @param 'confirmation' confirmation that this item can be deleted
     * @return mixed string HTML output if no confirmation otherwise true
     */
    public function delete($args) {

        $rid = FormUtil::getPassedValue('rid', isset($args['rid']) ? $args['rid'] : null, 'REQUEST');
        $objectid = FormUtil::getPassedValue('objectid', isset($args['objectid']) ? $args['objectid'] : null, 'REQUEST');
        $confirmation = FormUtil::getPassedValue('confirmation', null, 'POST');
        if (!empty($objectid)) {
            $rid = $objectid;
        }

        // Get the existing page
        $item = ModUtil::apiFunc('Ratings', 'user', 'get', array('rid' => $rid));

        if ($item == false) {
            return LogUtil::registerError($this->__('No such item found.'), 404);
        }

        // Security check
        if (!SecurityUtil::checkPermission('Ratings::', "$item[module]::$rid", ACCESS_DELETE)) {
            return LogUtil::registerPermissionError();
        }

        // Check for confirmation.
        if (empty($confirmation)) {
            // No confirmation yet
            // Create output object
            $view = Zikula_View::getInstance('Ratings', false);

            // Add a hidden field for the item ID to the output
            $view->assign('rid', $rid);

            // Return the output that has been generated by this function
            return $view->fetch('ratings_admin_delete.tpl');
        }

        // If we get here it means that the user has confirmed the action
        // Confirm authorisation code
        $this->checkCsrfToken();

        // Delete the page
        if (ModUtil::apiFunc('Ratings', 'admin', 'delete', array('rid' => $rid))) {
            // Success
            LogUtil::registerStatus($this->__('Done! Item deleted.'));
        }

        return System::redirect(ModUtil::url('Ratings', 'admin', 'view'));
    }

    /**
     * Modify Ratings configuration
     * @author Jim McDonald
     * @return HTML String
     */
    public function modifyconfig() {

        // Security check
        if (!SecurityUtil::checkPermission('Ratings::', '::', ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError();
        }

        // Create output object
        $view = Zikula_View::getInstance('Ratings', false);

        // assign values for the dropdown
        $view->assign('defaultstylevalues', array('percentage' => $this->__('Percentage'),
            'outoffive' => $this->__('Number out of five'),
            'outoften' => $this->__('Number out of ten'),
            'outoffivestars' => $this->__('Stars out of five'),
            'outoftenstars' => $this->__('Stars out of ten')));
        $view->assign('securitylevelvalues', array('low' => $this->__('Low (user can vote multiple times)'),
            'medium' => $this->__('Medium (user can vote once per session)'),
            'high' => $this->__('High (user can only vote once)')));

        $view->assign(ModUtil::getVar('Ratings'));

        // Return the output that has been generated by this function
        return $view->fetch('ratings_admin_modifyconfig.tpl');
    }

    /**
     * Update configuration
     * @author Jim McDonald
     * @param 'style' ratings style
     * @param 'seclevel' security level for ratings
     * @return true if update config success, false otherwise
     */
    public function updateconfig() {

        // Security check
        if (!SecurityUtil::checkPermission('Ratings::', '::', ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError();
        }

        $this->checkCsrfToken();

        // Update default style
        $defaultstyle = FormUtil::getPassedValue('defaultstyle', 'outoffivestars', 'POST');
        ModUtil::setVar('Ratings', 'defaultstyle', $defaultstyle);

        // Update default style
        $useajax = (bool) FormUtil::getPassedValue('useajax', false, 'POST');
        ModUtil::setVar('Ratings', 'useajax', $useajax);

        // Update default style
        $usefancycontrols = (bool) FormUtil::getPassedValue('usefancycontrols', false, 'POST');
        ModUtil::setVar('Ratings', 'usefancycontrols', $usefancycontrols);

        // Update security level
        $displayScoreInfo = (bool) FormUtil::getPassedValue('displayScoreInfo', false, 'POST');
        ModUtil::setVar('Ratings', 'displayScoreInfo', $displayScoreInfo);

        // Update security level
        $seclevel = FormUtil::getPassedValue('seclevel', 'medium', 'POST');
        ModUtil::setVar('Ratings', 'seclevel', $seclevel);

        // Update items per page
        $itemsperpage = (int) FormUtil::getPassedValue('itemsperpage', 25, 'POST');
        if ($itemsperpage < 1) {
            $itemsperpage = 25;
        }
        ModUtil::setVar('Ratings', 'itemsperpage', $itemsperpage);

        // the module configuration has been updated successfuly
        LogUtil::registerStatus($this->__('Done! Module configuration updated.'));

        return System::redirect(ModUtil::url('Ratings', 'admin', 'main'));
    }

}